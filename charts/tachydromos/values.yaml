# String to expand the chart name.
nameOverride: ""
# String to override the tachydromos.fullname template.
fullnameOverride: ""
# Docker registry secret names as an array.
imagePullSecrets: []

# Hostname of mail server.
# NOTE: The hostname for Rspamd is defined independently in the respective values section below.
# NOTE: Another hostname for webmail might be set in the respective values section below. Otherwise, the following value also applies to webmail.
hostname: mail.example.org

# LDAP configuration.
ldap:
  # Configuration for embedded OpenLDAP deployment.
  embedded:
    # Enable embedded OpenLDAP deployment (true, false).
    enabled: true
    image:
      # OpenLDAP image registry.
      registry: docker.io
      # OpenLDAP image repository.
      repository: bitnami/openldap
      # OpenLDAP image tag.
      tag: 2.6.6
      # OpenLDAP image pull policy (Never, Always, IfNotPresent).
      pullPolicy: IfNotPresent
    # Map of annotations to add to the pods.
    podAnnotations: {}
    # Pod security context configuration.
    podSecurityContext: {}
    # Container resource configuration.
    resources:
      requests:
        # The requested memory for the OpenLDAP container.
        memory: 32Mi
        # The requested cpu for the OpenLDAP container.
        cpu: 50m
      limits:
        # The memory limit for the OpenLDAP container.
        memory: 64Mi
        # The cpu limit for the OpenLDAP container.
        cpu: 100m
    # Service configuration.
    service:
      # Service type (ClusterIP, NodePort, ...).
      type: NodePort
      # If type == NodePort set the node port explicitly instead of having it being auto-assigned.
      nodePorts:
        ldap: ~
    # Data persistence configuration.
    persistence:
      # Enable data persistence on a physical volume (true, false).
      enabled: false
      # Storage class to be used.
      storageClassName: ~
      # Volume access mode (ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod).
      accessModes:
        - ReadWriteOnce
      # Volume capacity.
      size: 1Gi
      # Map of annotations to add to the volume claim.
      annotations: {}
    # Existing secret for providing LDAP credentials. If not set the secret will be auto-generated. Must contain the values:
    # LDAP_ADMIN_PASSWORD <-- Password of LDAP admin user.
    # LDAP_BINDDN_PASSWORD <-- Password of LDAP binding user (bindDn).
    existingSecret: ~
    # Additional volume mounts for the OpenLDAP container.
    extraVolumeMounts: []
    # Additional volumes for the deployment.
    extraVolumes: []
    # Configuration of sidecar containers running next to the OpenLDAP container.
    sidecars: []
  # LDAP host, only relevant if ldap.embedded.enabled == false.
  host: tachydromos-openldap
  # LDAP port, only relevant if ldap.embedded.enabled == false.
  port: 389
  # LDAP root DN.
  rootDn: dc=tachydromos,dc=local
  # LDAP user search base. Will be rendered as "userSearchBase,rootDn", e.g. ou=users,dc=tachydromos,dc=local.
  userSearchBase: ou=users
  # LDAP domain search base. Will be rendered as "domainSearchBase,rootDn", e.g. ou=domains,dc=tachydromos,dc=local.
  domainSearchBase: ou=domains
  # LDAP admin username.
  adminUsername: admin
  # LDAP admin username attribute type, e.g. cn, mail, uid.
  adminAttributeType: cn
  # LDAP username for binding (bindDn).
  binddnUsername: reader
  # LDAP bindDn attribute type, e.g. cn, mail, uid.
  binddnAttributeType: cn
  # Existing secret for providing LDAP credentials. Must be set if ldap.embedded.enabled == false or if ldap.embedded.existingSecret is set and must contain the
  # following data:
  # secrets: |
  #   ldapBinddnPassword <-- Password of LDAP binding user (bindDn). If ldap.embedded.existingSecret is defined it must be identical to the value of LDAP_BINDDN_PASSWORD.
  existingSecret: ~

# Database configuration.
database:
  # Configuration for embedded PostgreSQL deployment.
  embedded:
    # Enable embedded PostgreSQL deployment (true, false).
    enabled: true
    image:
      # PostgreSQL image registry.
      registry: docker.io
      # PostgreSQL image repository.
      repository: bitnami/postgresql
      # PostgreSQL image tag.
      tag: 16.0.0
      # PostgreSQL image pull policy (Never, Always, IfNotPresent).
      pullPolicy: IfNotPresent
    # Map of annotations to add to the pods.
    podAnnotations: {}
    # Pod security context configuration.
    podSecurityContext: {}
    # Container resource configuration.
    resources:
      requests:
        # The requested memory for the PostgreSQL container.
        memory: 256Mi
        # The requested cpu for the PostgreSQL container.
        cpu: 200m
      limits:
        # The memory limit for the PostgreSQL container.
        memory: 512Mi
        # The cpu limit for the PostgreSQL container.
        cpu: 1000m
    # Service configuration.
    service:
      # Service type (ClusterIP, NodePort, ...).
      type: NodePort
      # If type == NodePort set the node port explicitly instead of having it being auto-assigned.
      nodePorts:
        psql: ~
    # Data persistence configuration.
    persistence:
      # Enable data persistence on a physical volume (true, false).
      enabled: false
      # Storage class to be used.
      storageClassName: ~
      # Volume access mode (ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod).
      accessModes:
        - ReadWriteOnce
      # Volume capacity.
      size: 1Gi
      # Map of annotations to add to the volume claim.
      annotations: {}
    # Existing secret for providing database credentials. If not set the secret will be auto-generated. Must contain the values:
    # POSTGRESQL_POSTGRES_PASSWORD <-- Password of the postgres user.
    # POSTGRESQL_PASSWORD <-- Password of the user defined in database.username.
    existingSecret: ~
    # Additional volume mounts for the PostgreSQL container.
    extraVolumeMounts: []
    # Additional volumes for the deployment.
    extraVolumes: []
    # Configuration of sidecar containers running next to the PostreSQL container.
    sidecars: []
  # PostgreSQL host, only relevant if database.embedded.enabled == false.
  host: tachydromos-postgresql
  # PostgreSQL port, only relevant if ldap.embedded.enabled == false.
  port: 5432
  # PostgreSQL database name.
  database: sogo
  # PostgreSQL username.
  username: pgsogo
  # Existing secret for providing PostgreSQL credentials. Must be set if database.embedded.enabled == false or if database.embedded.existingSecret is set and
  # must contain the following data:
  # secrets: |
  #   postgresqlPassword <-- Password of PostgreSQL user. If database.embedded.existingSecret is defined it must be identical to the value of POSTGRESQL_PASSWORD.
  existingSecret: ~

# Postfix configuration.
postfix:
  image:
    # Postfix image registry.
    registry: ghcr.io
    # Postfix image repository.
    repository: olivergregorius/tachydromos-postfix
    # Postfix image tag.
    tag: 3.8.2
    # Postfix image pull policy (Never, Always, IfNotPresent).
    pullPolicy: Always
  # Number of desired replicas.
  replicas: 1
  # Map of annotations to add to the pods.
  podAnnotations: {}
  # Pod security context configuration.
  podSecurityContext: {}
  # Container resource configuration.
  resources:
    requests:
      # The requested memory for the Postfix container.
      memory: 32Mi
      # The requested cpu for the Postfix container.
      cpu: 50m
    limits:
      # The memory limit for the Postfix container.
      memory: 64Mi
      # The cpu limit for the Postfix container.
      cpu: 100m
  # Service configuration.
  service:
    # Service type (ClusterIP, NodePort, ...).
    type: NodePort
    # If type == NodePort set the node port explicitly instead of having it being auto-assigned.
    nodePorts:
      smtp: ""
      submission: ""
  # Additional volume mounts for the Postfix container.
  extraVolumeMounts: []
  # Additional volumes for the deployment.
  extraVolumes: []
  # Configuration of sidecar containers running next to the Postfix container.
  sidecars: []
  # Enable the PROXY protocol for SMTP connections (see https://www.haproxy.com/blog/use-the-proxy-protocol-to-preserve-a-clients-ip-address).
  enableProxyProtocol: true
  # List of domains that do not pass the HELO/EHLO check but should be handled as valid mail senders. Example:
  # heloWhiteList: |
  #   mail.example.net OK
  #   another.mail.example.com OK
  heloWhitelist: ""
  # List of IP addresses or ranges to be allowed or blocked by postscreen. Example:
  # postscreenAccessList: |
  #   192.168.1.0/24 permit
  #   192.168.2.0/24 reject
  postscreenAccessList: ""
  # List of IP addresses that have no valid PTR record but should be handled as valid mail senders. Example:
  # ptrWhitelist: |
  #   1.2.3.3 OK
  ptrWhitelist: ""

# Dovecot configuration.
dovecot:
  image:
    # Dovecot image registry.
    registry: ghcr.io
    # Dovecot image repository.
    repository: olivergregorius/tachydromos-dovecot
    # Dovecot image tag.
    tag: 2.3.20
    # Dovecot image pull policy (Never, Always, IfNotPresent).
    pullPolicy: Always
  # Map of annotations to add to the pods.
  podAnnotations: {}
  # Pod security context configuration.
  podSecurityContext: {}
  # Container resource configuration.
  resources:
    requests:
      # The requested memory for the Dovecot container.
      memory: 32Mi
      # The requested cpu for the Dovecot container.
      cpu: 50m
    limits:
      # The memory limit for the Dovecot container.
      memory: 64Mi
      # The cpu limit for the Dovecot container.
      cpu: 100m
  # Data persistence configuration.
  persistence:
    # Enable data persistence on a physical volume (true, false).
    enabled: false
    # Storage class to be used.
    storageClassName: ~
    # Volume access mode (ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod).
    accessModes:
      - ReadWriteOnce
    # Volume capacity.
    size: 1Gi
    # Map of annotations to add to the volume claim.
    annotations: {}
  # Additional volume mounts for the Dovecot container.
  extraVolumeMounts: []
  # Additional volumes for the deployment.
  extraVolumes: []
  # Configuration of sidecar containers running next to the Dovecot container.
  sidecars: []
  # Postmaster email address.
  postmasterEmail: postmaster@example.org
  # Name of superuser (technical user that has the permission to send mails).
  superuserUsername: sysmail@example.org
  # Existing secret for providing Dovecot credentials. If not set the secret will be auto-generated. Must contain the following data:
  # secrets: |
  #   superuserPassword <-- Password of the superuser.
  existingSecret: ~

# Rspamd configuration.
rspamd:
  image:
    # Rspamd image registry.
    registry: ghcr.io
    # Rspamd image repository.
    repository: olivergregorius/tachydromos-rspamd
    # Rspamd image tag.
    tag: 3.6.0
    # Rspamd image pull policy (Never, Always, IfNotPresent).
    pullPolicy: Always
  # Map of annotations to add to the pods.
  podAnnotations: {}
  # Pod security context configuration.
  podSecurityContext: {}
  # Container resource configuration.
  resources:
    requests:
      # The requested memory for the Rspamd container.
      memory: 256Mi
      # The requested cpu for the Rspamd container.
      cpu: 100m
    limits:
      # The memory limit for the Rspamd container.
      memory: 512Mi
      # The cpu limit for the Rspamd container.
      cpu: 1000m
  # Service configuration.
  service:
    # Service type (ClusterIP, NodePort, ...).
    type: ClusterIP
    # If type == NodePort set the node port explicitly instead of having it being auto-assigned.
    nodePorts:
      milter: ""
      webinterface: ""
  # Data persistence configuration.
  persistence:
    # Enable data persistence on a physical volume (true, false).
    enabled: false
    # Storage class to be used.
    storageClassName: ~
    # Volume access mode (ReadWriteOnce, ReadWriteMany, ReadOnlyMany, ReadWriteOncePod).
    accessModes:
      - ReadWriteOnce
    # Volume capacity.
    size: 1Gi
    # Map of annotations to add to the volume claim.
    annotations: {}
  # Ingress configuration.
  ingress:
    # Enable ingress (true, false).
    enabled: true
    # Map of annotations to add to the ingress.
    annotations: {}
    # Hostname setting.
    hostname: rspamd.mail.example.org
    # Ingress path configuration. Usually this section does not require any changes.
    paths:
      - path: /
        serviceName: rspamd
        servicePort: 11334
    # Name of the secret for storing the TLS certificate and key.
    secretName: tachydromos-certificate-rspamd
  # Additional volume mounts for the Rspamd container.
  extraVolumeMounts: []
  # Additional volumes for the deployment.
  extraVolumes: []
  # Configuration of sidecar containers running next to the Rspamd container.
  sidecars: []
  # Selector of DKIM key.
  dkimSelector: "2023"
  # Existing secret for providing Rspamd credentials. If not set the secret will be auto-generated. Must contain the following data:
  # secrets: |
  #   rspamdPassword <-- Password for access to the webinterface.
  existingSecret: ~
  # Redis sidecar configuration.
  redis:
    image:
      # Redis image registry.
      registry: docker.io
      # Redis image repository.
      repository: redis
      # Redis image tag.
      tag: 7.2.1
      # Redis image pull policy (Never, Always, IfNotPresent).
      pullPolicy: IfNotPresent
    # Container resource configuration.
    resources:
      requests:
        # The requested memory for the Redis container.
        memory: 32Mi
        # The requested cpu for the Redis container.
        cpu: 50m
      limits:
        # The memory limit for the Redis container.
        memory: 64Mi
        # The cpu limit for the Redis container.
        cpu: 100m

# SOGo configuration.
sogo:
  image:
    # SOGo image registry.
    registry: ghcr.io
    # SOGo image repository.
    repository: olivergregorius/tachydromos-sogo
    # SOGo image tag.
    tag: 5.9.0
    # SOGo image pull policy (Never, Always, IfNotPresent).
    pullPolicy: Always
  # Number of desired replicas.
  replicas: 1
  # Map of annotations to add to the pods.
  podAnnotations: {}
  # Pod security context configuration.
  podSecurityContext:
    fsGroup: 999
    fsGroupChangePolicy: OnRootMismatch
  # Container resource configuration.
  resources:
    requests:
      # The requested memory for the SOGo container.
      memory: 512Mi
      # The requested cpu for the SOGo container.
      cpu: 250m
    limits:
      # The memory limit for the SOGo container.
      memory: 1.5Gi
      # The cpu limit for the SOGo container.
      cpu: 500m
  # Service configuration.
  service:
    # Service type (ClusterIP, NodePort, ...).
    type: ClusterIP
    # If type == NodePort set the node port explicitly instead of having it being auto-assigned.
    nodePorts:
      http: ""
  # Ingress configuration.
  ingress:
    # Enable ingress (true, false).
    enabled: true
    # Map of annotations to add to the ingress. Recommended annotations are already present.
    annotations:
      nginx.ingress.kubernetes.io/app-root: /SOGo
      nginx.ingress.kubernetes.io/proxy-body-size: 16M
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-buffers-number: "64"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "512k"
    # Hostname setting. If not set will default to the hostname set at the beginning of this values file.
    hostname: ~
    # Ingress path configuration. Usually this section does not require any changes.
    paths:
      - path: /
        serviceName: sogo
        servicePort: 8080
    # Name of the secret for storing the TLS certificate and key. Will be used by the postfix deployment, too, to provide STARTTLS SMTP encryption.
    secretName: tachydromos-certificate
  # Additional volume mounts for the SOGo container.
  extraVolumeMounts: []
  # Additional volumes for the deployment.
  extraVolumes: []
  # Configuration of sidecar containers running next to the SOGo container.
  sidecars: []
  # nginx sidecar configuration.
  nginx:
    image:
      # nginx image registry.
      registry: docker.io
      # nginx image repository.
      repository: nginx
      # nginx image tag.
      tag: 1.25.2
      # nginx image pull policy (Never, Always, IfNotPresent).
      pullPolicy: IfNotPresent
    # Container resource configuration.
    resources:
      requests:
        # The requested memory for the nginx container.
        memory: 32Mi
        # The requested cpu for the nginx container.
        cpu: 50m
      limits:
        # The memory limit for the nginx container.
        memory: 64Mi
        # The cpu limit for the nginx container.
        cpu: 100m
  # Memcached sidecar configuration.
  memcached:
    image:
      # Memcached image registry.
      registry: docker.io
      # Memcached image repository.
      repository: memcached
      # Memcached image tag.
      tag: 1.6.21
      # Memcached image pull policy (Never, Always, IfNotPresent).
      pullPolicy: IfNotPresent
    # Container resource configuration.
    resources:
      requests:
        # The requested memory for the Memcached container.
        memory: 32Mi
        # The requested cpu for the Memcached container.
        cpu: 50m
      limits:
        # The memory limit for the Memcached container.
        memory: 64Mi
        # The cpu limit for the Memcached container.
        cpu: 100m

# Map of node labels for pods assignment.
nodeSelector: {}
# Affinity configuration for pods assignment.
affinity: {}
# Tolerations configuration for pods assignment.
tolerations: {}
