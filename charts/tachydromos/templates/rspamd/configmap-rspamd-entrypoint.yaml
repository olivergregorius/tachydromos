apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tachydromos.fullname" . }}-rspamd-entrypoint
  labels:
    {{- include "tachydromos.labels" . | nindent 4 }}
data:
  entrypoint.py: |
    #!/usr/bin/python3
    import logging
    import os
    import shutil
    import subprocess
    import yaml

    import jinja2 as j2


    class LogFormatter(logging.Formatter):
      blue = '\x1b[34m'
      green = '\x1b[32m'
      yellow = '\x1b[33m'
      red = '\x1b[31m'
      bold_red = '\x1b[31;1m'
      purple = '\x1b[35m'
      reset = '\x1b[0m'
      time = purple + '%(asctime)s '
      message = reset + '==> %(message)s'

      def __init__(self):
        super().__init__()
        self.FORMATS = {
          logging.DEBUG: self.time + self.blue + '%(levelname)s ' + self.message,
          logging.INFO: self.time + self.green + '%(levelname)s ' + self.message,
          logging.WARNING: self.time + self.yellow + '%(levelname)s ' + self.message,
          logging.ERROR: self.time + self.red + '%(levelname)s ' + self.message,
          logging.CRITICAL: self.time + self.bold_red + '%(levelname)s ' + self.message,
        }

      def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    loghandler = logging.StreamHandler()
    loghandler.setLevel(logging.DEBUG)
    loghandler.setFormatter(LogFormatter())
    logger.addHandler(loghandler)


    def load_config():
      config = {}
      with open('/mnt/config', 'r') as filestream:
        config.update(yaml.safe_load(filestream))
      with open('/mnt/secrets', 'r') as filestream:
        config.update(yaml.safe_load(filestream))
      config['hashedRspamdPassword'] = subprocess.run(['/usr/bin/rspamadm', 'pw', '-p', config['rspamdPassword']], capture_output=True, text=True).stdout.strip()
      return config


    def generate_config(template, target_dir, owner='root', group='root', mode=0o644, dirmode=0o755, set_perms=True):
      target = target_dir + template.removesuffix('.j2')
      logger.info(f'Generating config {target}')
      configfile = j2Env.get_template(template).render(config)
      with open(target, 'w') as fileHandler:
        fileHandler.write(configfile)
      if set_perms:
        set_permissions(target, False, owner, group, mode, dirmode)


    def set_permissions(target, recursive, owner='root', group='root', mode=0o644, dirmode=0o755):
      if recursive:
        for dirpath, dirnames, filenames in os.walk(target):
          shutil.chown(dirpath, owner, group)
          os.chmod(dirpath, dirmode)
          for filename in filenames:
            shutil.chown(os.path.join(dirpath, filename), owner, group)
            os.chmod(os.path.join(dirpath, filename), mode)
      else:
        shutil.chown(target, owner, group)
        if os.path.isdir(target):
          os.chmod(target, dirmode)
        else:
          os.chmod(target, mode)


    def j2_finalize(value):
      return value if value is not None else ''


    config = load_config()
    j2Env = j2.Environment(loader=j2.FileSystemLoader('/mnt/templates'), finalize=j2_finalize, keep_trailing_newline=True)


    configDir = '/etc/rspamd/local.d/'

    workDir = '/var/lib/rspamd/'
    dkimDir = workDir + 'dkim/'
    dkimFilename = dkimDir + str(config['dkimSelector'])
    set_permissions(workDir, False, 'rspamd', 'rspamd', dirmode=0o750)
    if not os.path.isdir(dkimDir):
      os.mkdir(dkimDir)
      set_permissions(dkimDir, False, 'rspamd', 'rspamd', dirmode=0o750)
    if not os.path.isfile(dkimFilename + '.key'):
      logger.info(f'No DKIM key found, generating {dkimFilename}.key')
      generate_config('generate_dkim_key.sh.j2', '/usr/local/bin/', mode=0o755)
      subprocess.run(['/bin/sh', '/usr/local/bin/generate_dkim_key.sh'])
      set_permissions(dkimFilename + '.key', False, 'rspamd', 'rspamd', 0o440)
      set_permissions(dkimFilename + '.txt', False, 'rspamd', 'rspamd', 0o440)

    generate_config('arc.conf.j2', configDir)
    generate_config('dkim_signing.conf.j2', configDir)
    generate_config('classifier-bayes.conf.j2', configDir)
    generate_config('logging.inc.j2', configDir)
    generate_config('milter_headers.conf.j2', configDir)
    generate_config('redis.conf.j2', configDir)
    generate_config('worker-controller.inc.j2', configDir)
    generate_config('worker-normal.inc.j2', configDir)
    generate_config('worker-proxy.inc.j2', configDir)

    subprocess.run(['/bin/cat', dkimFilename + '.txt'])

    logger.info('Setup completed, starting application...')
    os.execv('/usr/bin/rspamd', ['rspamd', '-f', '-u', 'rspamd', '-g', 'rspamd'])
